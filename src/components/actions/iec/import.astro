---
// Import.astro
import type { DatabaseConfig } from '@config/idbconfig';

export interface Props {
  databaseConfig: DatabaseConfig;
  className?: string;
  buttonText?: string;
  uniqueId?: string;
}

const {
  databaseConfig,
  className = '',
  buttonText = '📥 Importar Base de Datos',
  uniqueId = 'default'
} = Astro.props;

const importBtnId = `import-btn-${uniqueId}`;
const fileInputId = `file-input-${uniqueId}`;
---

<div class={`database-component database-importer ${className}`}>
  <button
    id={importBtnId}
    class="btn btn-import"
    data-database-name={databaseConfig.name}
    data-database-version={databaseConfig.version}
    data-database-store={databaseConfig.store}
    data-component-id={importBtnId}
    data-file-input={fileInputId}
  >
    <span class="material-symbols-outlined">download</span>
    {buttonText}
  </button>
 
  <input
    type="file"
    id={fileInputId}
    accept=".json"
    style="display: none;"
    data-import-button={importBtnId}
  />
</div>

<script>
  import { importDataToDatabase, readJSONFile } from "@utils/idb.ts";
  import type { DatabaseConfig } from '@config/idbconfig';

  async function handleImport(
    button: HTMLButtonElement,
    file: File
  ): Promise<void> {
    const databaseConfig: DatabaseConfig = {
      name: button.dataset.databaseName!,
      version: parseInt(button.dataset.databaseVersion!),
      store: button.dataset.databaseStore!
    };

    if (!databaseConfig.name || !databaseConfig.version || !databaseConfig.store) {
      window.NotificationManager?.show('Configuración de base de datos inválida', { type: 'error' });
      return;
    }

    try {
      button.disabled = true;
      window.NotificationManager?.show('Importando base de datos...', { type: 'info' });
      
      const data = await readJSONFile(file);
     
      if (!Array.isArray(data)) {
        window.NotificationManager?.show('❌ El archivo debe contener un array de datos', { type: 'error' });
        return;
      }

      const success = await importDataToDatabase(databaseConfig, data);
     
      if (success) {
        window.NotificationManager?.show(
          `✅ Importación exitosa: ${data.length} registros importados`,
          { type: 'success' }
        );
      } else {
        window.NotificationManager?.show('❌ Error durante la importación', { type: 'error' });
      }
    } catch (error) {
      console.error('Error durante la importación:', error);
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      window.NotificationManager?.show(`❌ Error: ${errorMessage}`, { type: 'error' });
    } finally {
      button.disabled = false;
    }
  }

  // Delegación de eventos para botones de importar
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    const button = target.closest('[data-component-id^="import-btn-"]') as HTMLButtonElement;
    
    if (button && button.classList.contains('btn-import')) {
      e.preventDefault();
      const fileInputId = button.dataset.fileInput;
      const fileInput = document.getElementById(fileInputId!) as HTMLInputElement;
      
      if (fileInput) {
        fileInput.click();
      }
    }
  });

  // Delegación de eventos para inputs de archivo
  document.addEventListener('change', async (e) => {
    const target = e.target as HTMLInputElement;
    
    if (target.type === 'file' && target.dataset.importButton) {
      const file = target.files?.[0];
      if (!file) return;

      const buttonId = target.dataset.importButton;
      const button = document.getElementById(buttonId) as HTMLButtonElement;
      
      if (button) {
        await handleImport(button, file);
        target.value = ''; // Limpiar input
      }
    }
  });
</script>