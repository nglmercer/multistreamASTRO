---
import ActionsFormCsomponent from "./ActionsForm.astro";
import SwitchE from "@components/switchE.astro";
---

<script src="/src/components/actionsjs/modal.js"></script>
<script src="/src/components/actionsjs/table.js"></script>
<script src="/src/components/actionsjs/init.js"></script>
<div class="container">
  <div class="button-group">
    <button data-form-type="comment" class="primary">Evento Comentario</button>
    <button data-form-type="bits" class="primary">Evento Bits</button>
    <button data-form-type="likes" class="primary">Evento Likes</button>
    <button data-form-type="gift" class="primary">Evento Regalo</button>
    <button id="actionButton" class="primary">Acción</button>
  </div>

  <dlg-cont id="modal-container">
    <dyn-obj-disp id="dynamic-editor" mode="edit" darkmode> </dyn-obj-disp>
  </dlg-cont>
  <dlg-cont id="Action-modal">
    <obj-edit-frm id="Action-editor" mode="edit" darkmode> </obj-edit-frm>
  </dlg-cont>

  <grid-manager-lit id="eventConfigManager" darkmode></grid-manager-lit>
  <grid-manager-lit id="ActionConfigManager" darkmode></grid-manager-lit>
  <ActionsFormCsomponent id="actionForm">
    <div slot="fields">
      <SwitchE
      id="fetchForm"
      label="Habilitar Configuración HTTP"
      checked={true}>
      <http-request-config id="fetchForm_config"></http-request-config>
      </SwitchE>
    </div>
    <div slot="actions" class="ActionForm-buttons">
      <button type="button" class="btn btn-secondary" data-action="reset">
        Reiniciar
      </button>
      <button type="submit" class="btn btn-primary" data-action="submit">
        Guardar
      </button>
    </div>
  </ActionsFormCsomponent>
  <script>
    import { databases, IndexedDBManager, Emitter, getAllDataFromDatabase } from '../actionsjs/idb.js'; // Ajusta ruta
    import {    defaultFormConfig } from 'src/config/actionsconfig.js';
    import { HttpRequestConfig } from "src/litcomponents/fetchcomponent";
    import { HttpRequestExecutor } from "src/fetch/executor";
    const configForm = document.getElementById('fetchForm_config') as HttpRequestConfig;
    const actionDatabase = new IndexedDBManager(databases.ActionsDB);
    configForm.addEventListener('config-change', (e) => {
      const { detail } = e as CustomEvent;
      console.log('Config change:', detail);
      const config = configForm.getConfig();
      const validation = configForm.validate();
      console.log('Config validation:', {
        isValid: validation,
        config,
      });
      localStorage.setItem('httpRequestConfig', JSON.stringify(config));
    });
    
    document.addEventListener('DOMContentLoaded',async () => {
      if (localStorage.getItem('httpRequestConfig')) {
        const config = JSON.parse((localStorage.getItem('httpRequestConfig')||'{}'));
        configForm.setConfig(config);
        const executor = new HttpRequestExecutor();
        const result = await executor.execute(config);
        console.log('Loading config:', config,result);
      }
      //configForm.getConfig()
      getFormData();
    listenersForm();
    const testData = await actionDatabase.getDataById(0);
    if (testData) {
      console.log('Test data found:', testData);
     // setFormData(testData);
    }
    });
    function listenersForm(){
      const actionsContainer = document.querySelector<HTMLElement>('.form-actions');
      if (!actionsContainer) return;
          actionsContainer.addEventListener('click', function(event) {
            if (!(event.target && event.target instanceof Element)) return;
                  const clickedButton = event.target.closest('button[data-action]')
                  if (!clickedButton) return;
                  const action = clickedButton.getAttribute('data-action');
                  if (action === 'reset') {
                  } else if (action === 'submit') {
                    const formData = getFormData();
                    if (!formData) {
                      console.error('No form data found');
                      return;
                    }
                    actionDatabase.saveData(formData)
                    console.log('Submitting form...', formData);
                  }
                  event.preventDefault();
                  event.stopPropagation();
          });
    }
    function getFormData() {
      const actionFormElements = document.querySelector('#actionForm');
      if (!actionFormElements) return;
      if (actionFormElements.getElementsByTagName('c-input').length === 0) return;
      const allFields = actionFormElements.getElementsByTagName('c-input');
      const Data = {} as Record<string, any>;
      Object.entries(allFields).forEach(([key, field]) => {
        const fieldName = field.getAttribute('data-field-name') as string;
        if (!fieldName) return;
        const value = field.value;
        Data[fieldName] = value;
      });
      const fetchForm = document.querySelector('#fetchForm_check') as HTMLInputElement;
      const fetchConfig = document.querySelector('#fetchForm_config') as HttpRequestConfig;
      return {
        ...Data,
        fetchForm_check: fetchForm.value,
        fetchForm_value: fetchConfig.value
      }
    }
    function setFormData(data: Record<string, any>) {
      const actionFormElements = document.querySelector('#actionForm');
      if (!actionFormElements) return;
      const allFields = actionFormElements.getElementsByTagName('c-input');
      Object.entries(allFields).forEach(([key, field]) => {
        const fieldName = field.getAttribute('data-field-name') as string;
        console.log('fieldName:', fieldName,field);
        if (!fieldName) return;
        const value = data[fieldName];
        field.value = value;
      });
      console.log('Setting form data:allFields ', data, allFields);
      const fetchForm = document.querySelector('#fetchForm_check') as HTMLInputElement;
      fetchForm.value = data.fetchForm_check || '';
      const fetchConfig = document.querySelector('#fetchForm_config') as HttpRequestConfig;
      fetchConfig.setConfig(data.fetchForm_value || {});
    }
  </script>
</div>
<script src="/src/components/actionsjs/actions.js"></script>
<script src="/src/components/actionsjs/evalue.js"></script>
<style>
  button {
    padding: 0.6em 1.2em;
    cursor: pointer;
    margin: 5px;
    border-radius: 4px;
    border: 1px solid #555;
    background-color: #333;
    color: white;
  }
  button.primary {
    background-color: #007bff;
    border-color: #007bff;
  }
  button:hover {
    filter: brightness(1.2);
  }
  #modal-container dyn-obj-disp {
    /* Estilo más general */
    min-width: 400px;
    display: block; /* Asegurar que toma espacio */
    background-color: #222; /* Fondo para el contenido del modal */
    border-radius: 8px;
    /* obj-edit-form dentro no necesita borde/padding extra */
  }
  #modal-container dyn-obj-disp obj-edit-frm {
    border: none;
    padding: 0;
    background: transparent;
  }
  .output {
    margin-top: 1rem;
    padding: 1rem;
    background-color: #1a1a1a;
    border: 1px solid #333;
    border-radius: 5px;
    white-space: pre-wrap;
    font-family: monospace;
    min-height: 50px;
  }
  .loading {
    font-style: italic;
    color: #aaa;
  }
</style>
