<!-- Tu HTML principal no cambia -->
<main class="container mx-auto p-4">
  <h2 class="text-2xl font-bold mb-6">Gestor de Middlewares</h2>
  <div id="middlewares-container" class="space-y-8">
    <!-- El contenido se generará dinámicamente -->
  </div>
</main>

<script>
  // Importaciones...
  import { eventRules, updateMiddlewareEnabledState } from '@components/actionsjs/event-handling/ruleEngine.js';
  import type { EventRules, AnyMiddlewareConfig } from '@components/actionsjs/event-handling/middlewares/middlewareTypes.js';
  import { CInput } from 'src/litcomponents/CInput';

  const initialRulesForClient: EventRules = JSON.parse(JSON.stringify(eventRules));

  /**
   * Procesa una descripción de plantilla, reemplazando placeholders {{key}}
   * con valores del objeto de configuración del middleware.
   * @param {string} template - La cadena de descripción con placeholders.
   * @param {AnyMiddlewareConfig} config - El objeto de configuración del middleware.
   * @returns {string} - La descripción renderizada.
   */
  function renderDescription(template: string, config: AnyMiddlewareConfig): string {
    if (!template) {
        // Si no hay plantilla, genera una descripción genérica como fallback.
        return `Middleware de tipo: ${config.type}. Revisa la configuración para más detalles.`;
    }
    // Usa una expresión regular para encontrar todos los placeholders {{key}}
    return template.replace(/\{\{(.*?)\}\}/g, (match, key) => {
      const value = config[key.trim() as keyof AnyMiddlewareConfig];
      // Si la clave existe en la config, devuelve su valor, si no, devuelve el placeholder original.
      return value !== undefined ? `<strong>${value}</strong>` : match;
    });
  }


  function renderMiddlewareToggles() {
    const container = document.getElementById('middlewares-container');
    if (!container) return;
    container.innerHTML = ''; // Limpiar contenido previo

    for (const [eventType, ruleEntry] of Object.entries(initialRulesForClient)) {
      const middlewares = ruleEntry.middlewares as AnyMiddlewareConfig[];
      if (!middlewares || middlewares.length === 0) continue;

      const groupDiv = document.createElement('div');
      groupDiv.className = 'p-4 border rounded-md shadow-sm';
      
      const groupTitle = document.createElement('h3');
      groupTitle.className = 'text-xl font-semibold mb-3 capitalize border-b pb-2';
      groupTitle.textContent = `Filtros para Eventos de ${eventType}`;
      groupDiv.appendChild(groupTitle);

      middlewares.forEach((middlewareConfig) => {
        const wrapperDiv = document.createElement('div');
        wrapperDiv.className = 'flex items-start space-x-3 p-2'; // items-start para alinear bien con texto de varias líneas

        const checkboxId = `middleware-${eventType}-${middlewareConfig.type}`;
        
        const checkbox = document.createElement('c-input') as CInput;
        checkbox.setAttribute('type', 'switch');
        checkbox.setAttribute('id', checkboxId);
        
        // Forma MÁS SEGURA y recomendada de manejar estado booleano en componentes
        if (middlewareConfig.enabled) {
          checkbox.setAttribute('checked', '');
        }
        // Asignamos el valor booleano a la propiedad interna para que el componente lo maneje.
        // Asumiendo que `setVal` o una propiedad directa maneja esto.
        // `CInput` debería idealmente manejar `checked` como una propiedad booleana.
        checkbox.value = middlewareConfig.enabled;


        // Contenedor para el título y la descripción
        const textContainer = document.createElement('div');
        textContainer.className = 'flex flex-col flex-grow';

        const label = document.createElement('label');
        label.setAttribute('for', checkboxId);
        label.className = 'font-medium cursor-pointer';
        // USA EL NUEVO CAMPO 'friendlyName', con fallback a 'type'
        label.textContent = middlewareConfig.friendlyName || middlewareConfig.type;
        
        const description = document.createElement('p'); // Usar <p> para mejor semántica
        description.className = 'text-sm text-gray-600 mt-1';
        // USA LA NUEVA FUNCIÓN DE RENDERIZADO
        description.innerHTML = renderDescription(middlewareConfig.description || '', middlewareConfig);

        textContainer.appendChild(label);
        textContainer.appendChild(description);

        checkbox.addEventListener('change', (e: Event) => {
          const isChecked = (e as CustomEvent<{ value: any }>).detail.value;
          console.log(`Toggle change for ${eventType}.${middlewareConfig.type}: ${isChecked}`,isChecked);
          
          updateMiddlewareEnabledState(eventType, middlewareConfig.type, isChecked);
        });

        wrapperDiv.appendChild(checkbox);
        wrapperDiv.appendChild(textContainer);
        groupDiv.appendChild(wrapperDiv);
      });
      container.appendChild(groupDiv);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    renderMiddlewareToggles();
  });
</script>