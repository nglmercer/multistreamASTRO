---
// No se necesita código en el frontmatter de Astro para este componente,
// ya que toda la lógica interactiva estará en el script del cliente.
// El HTML se renderiza de forma estática en el servidor.
---
<div class="audio-controls-panel">
  <h3>Panel de Control de Audio</h3>
  <div class="controls">
    <button id="play-btn">Reproducir Test</button>
    <button id="next-btn">Siguiente</button>
    <button id="prev-btn">Anterior</button>
    <button id="stop-all-btn">Detener Todo</button>
  </div>
  <div id="player-audio"></div>
</div>
<style>
  .audio-controls-panel {
    border-radius: 8px;
    font-family: sans-serif;
  }
  .controls {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }
  button {
    padding: 0.5rem 1rem;
    border: 1px solid #ddd;
    cursor: pointer;
    border-radius: 4px;
  }
  button:hover {
    background-color: #f0f0f0;
  }
  .status p {
    margin: 0.25rem 0;
  }
  #status-text.playing {
    color: green;
    font-weight: bold;
  }
</style>

<script>
  // Importamos LA MISMA instancia de audioQueue que usa el resto de la app
  import { audioQueue } from "@components/voicecomponents/initconfig";
  import { audioEmitter } from "@components/voicecomponents/tts_provider";
  import APlayer, { addMusicPlugin, removeMusicPlugin, clearMusicPlugin } from 'aplayer-ts'
  import 'aplayer-ts/src/css/base.css'
  import 'aplayer-ts/src/css/fixed.css'
  const audioplayer = document.getElementById('player-audio') as HTMLElement;
  // Esperamos a que el DOM esté completamente cargado para asegurar que los elementos existen
  document.addEventListener('DOMContentLoaded', () => {
  const instance = APlayer()
  .use(addMusicPlugin)
  .use(removeMusicPlugin)
  .use(clearMusicPlugin)
  .init({
      container: audioplayer,
      mini: false,
      autoplay: false,
      theme: 'black',
      loop: 'none',
      order: 'list',
      preload: 'auto',
      volume: 1,
      mutex: true,
      listFolded: false,
      listMaxHeight: "90",
      lrcType: 3,
  });

    // --- Seleccionamos los elementos del DOM ---
    const playBtn = document.getElementById('play-btn');
    const nextBtn = document.getElementById('next-btn');
    const prevBtn = document.getElementById('prev-btn');
    const stopAllBtn = document.getElementById('stop-all-btn');

    // --- Función para actualizar la UI ---
    // Esta función lee el estado actual de la instancia de audioQueue y actualiza el HTML

    
    // --- Añadimos los Event Listeners ---
    // Cada botón llama a un método de la instancia importada de audioQueue

    if (playBtn) {
      playBtn.addEventListener('click', () => {
        audioQueue.play();
      });
    }
      audioEmitter.on('play', (data) => {
        console.log("Evento 'play' emitido.",data);
      if ( typeof data.audioUrl === 'string') {
        instance.list.add({
          name: data.audioUrl,
          artist: 'Audio',
          url: data.audioUrl
        })
        }
      });
    
    if (nextBtn) {
      nextBtn.addEventListener('click', async () => {
        console.log("Botón 'Siguiente' presionado.");
        await audioQueue.next();
      });
    }
    
    if (prevBtn) {
      prevBtn.addEventListener('click', async () => {
        console.log("Botón 'Anterior' presionado.");
        await audioQueue.previous();
      });
    }

    if (stopAllBtn) {
      stopAllBtn.addEventListener('click', () => {
        console.log("Botón 'Detener Todo' presionado.");
        audioQueue.stopAll();
      });
    }
  });
</script>